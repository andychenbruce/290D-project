* WangAnLang
A language for approximating imperative programs as a neural nets.

* todo
** DONE Language parser
** DONE AST
** DONE Type checking
** DONE evaluation
** DONE soft evaluation
** DONE calculate gradients
** TODO gradient descent
** TODO loss function
** TODO switch from cpu to gpu tensors

** arithmetic
- [X] addition
  - [X] hard
  - [X] soft
  - [X] gradient
- [X] subtraction
  - [X] hard
  - [X] soft
  - [X] gradient
- [-] multiplcation
  - [ ] hard
  - [X] soft
  - [X] gradient
- [ ] division
  - [ ] hard
  - [ ] soft
  - [ ] gradient
- [ ] equality
  - [ ] hard
  - [ ] soft
  - [ ] gradient
- [X] greater than
  - [X] hard
  - [X] soft
  - [X] gradient
- [ ] less than
  - [ ] hard
  - [ ] soft
  - [ ] gradient

** lists
- [ ] getting
  - [ ] hard
  - [ ] soft
  - [ ] gradient
- [ ] setting
  - [ ] hard
  - [ ] soft
  - [ ] gradient
- [ ] insertion
  - [ ] hard
  - [ ] soft
  - [ ] gradient

** control flow
- [ ] if else
  - [ ] hard
  - [ ] soft
  - [ ] gradient
- [ ] for loops
  - only fixed length loops
  - [ ] hard
  - [ ] soft
  - [ ] gradient
- [ ] while loops
  - represent with a markov chain
  - [ ] hard
  - [ ] soft
  - [ ] gradient

** dictionaries
- [ ] getting
  - [ ] hard
  - [ ] soft
  - [ ] gradient
- [ ] setting
  - [ ] hard
  - [ ] soft
  - [ ] gradient
- [ ] inserting
  - [ ] hard
  - [ ] soft
  - [ ] gradient


* Project Structure

The project is organized as follows:

#+BEGIN_SRC
.
├── proposal
│   ├── build.sh                # Shell script for building the proposal
│   ├── proposal.tex            # LaTeX source file for the proposal document
│   └── refs.bib                # Bibliography file for LaTeX references
├── src
│   ├── ast                     # Directory for abstract syntax tree (AST) module
│   │   └── mod.rs              # Rust module file for AST
│   ├── interpreter             # Directory for interpreter module
│   │   └── mod.rs              # Rust module file for interpreter
│   ├── interpreter_soft        # Directory for "soft" interpreter module
│   │   └── mod.rs              # Rust module file for soft interpreter
│   ├── parser                  # Directory for parser module
│   │   └── mod.rs              # Rust module file for parser
│   ├── type_checker            # Directory for type checker module
│   │   └── mod.rs              # Rust module file for type checker
│   └── main.rs                 # Main Rust source file for src
├── .gitignore                  # Git ignore file
├── Cargo.lock                  # Cargo lock file for Rust dependencies
├── Cargo.toml                  # Cargo configuration file for Rust dependencies
├── README.org                  # Project README file
└── test.prog                   # Test program file
#+END_SRC

** Description
- *proposal/*: Contains files related to the proposal document, including LaTeX source, bibliography, and build script.
- *src/*: Contains subdirectories for modules handling JSON generation, parsing, and type checking.
- *Cargo.toml* and *Cargo.lock*: Cargo package manager files for dependencies.

* Build Instructions

1. To build the proposal, navigate to the `proposal` directory and run:
#+BEGIN_SRC shell
  ./build.sh
#+END_SRC

2. For the interpreter, use Cargo:
#+BEGIN_SRC shell
  cargo run
#+END_SRC

** Dependencies
- *Cargo*: Dependencies are managed by Cargo.
- *LaTeX*: Required for compiling the proposal document.
